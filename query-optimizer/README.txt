A Query Optimizer based on A* search for search space pruning and optimal join ordering of Sparql queries.

This paper proposes the technique for optimization of SPARQL queries for the RDF data by efficiently performing join order optimization during the query optimization phase. The join order optimization approach proposed here uses A algorithm to search through the space of plans (including partial plans) for a given query and returns optimal or close to optimal plan. This entails efficient techniques for plan generation, plan comparison and plan elimination. The plans are generated by first building a small (partial) plan with no relation in it and then generating bigger plans by appending more relations to it step by step, till a complete, promising plan is formed. The heuristics used for the A search considers the cost of the generated plan based on a simulated cost model as well as an estimated cost corresponding to the number of joins not yet incorporated in the plan. The paper also discusses the various criterion considered for the comparison of plans and how it is used to obtain the best possible plan. The plans generated using A search algorithm is compared with the plans generated by using the best first search algorithm. The plans are compared based on the quality of the plan generated and the time taken for the generation of the plans for each of the algorithms. 

Readme
-------
The queryOptimizer1.1 ontains code for A* implementation
The queryOptimizer1.2 ontains code for modified A* implementation
The queryOptimizer1.3 ontains code for modified greedy search implementation
The rest of the details are same related to other projects

For the program to run the some string parameters in the jdbcSetup.java needs to be changed
to reflect the correct database connection strings

The Java file Query.Java initializes the query for which the optimization is done
At present this works for default query. to make it work for your own query one is supposed to change some code in the constructor

The first time code executes it will create many tables in the database one of them will be planCard
that stores cardinality of each plan. If you execute the code again it will again try to create this table and will cause an exception However, the code will continue to execute correctly and give correct result

The output of the code will be a composite plan represented in string format
